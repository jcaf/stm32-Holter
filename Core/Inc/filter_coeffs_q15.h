/* Auto-generated by gen_q15_filters.py (modified for ECG with HP, LP, and Notch) */
#ifndef FILTER_COEFFS_Q15_H
#define FILTER_COEFFS_Q15_H

#include <stdint.h>
#include "arm_math.h"

#define FS_HZ 500
#define NUM_STAGES 5 // 2 HP, 2 LP, 1 Notch
#define POST_SHIFT 0 // Se mantiene en 0; los coeficientes ya est√°n escalados adecuadamente

static const q15_t biquadCoeffs_q15[5 * NUM_STAGES] = {
    // Stage 1 & 2: High-pass filter (Butterworth, Fc = 0.5 Hz, Order 4)
    // Coeficientes HP Stage 1
    32759, -65518,  32759, -65511,  32744,
    // Coeficientes HP Stage 2
    32759, -65518,  32759, -65527,  32752,

    // Stage 3 & 4: Low-pass filter (Butterworth, Fc = 40 Hz, Order 4)
    // Coeficientes LP Stage 1
    1284,  2568,  1284, -32289,  18001,
    // Coeficientes LP Stage 2
    1443,  2886,  1443, -31758,  17112,

    // Stage 5: Notch filter (Fc = 60 Hz, Q=35)
    // Coeficientes Notch Stage 1
    30973, -31780,  30973, -24156,  24298,
};

static q15_t biquadState_q15[4 * NUM_STAGES];

/* ADC <-> Q15 conversion macros (unchanged) */
#define ADC_BITS    12
#define ADC_MAX     4095
#define ADC_MID     2048
#define ADC_TO_Q15_SHIFT 4

static inline q15_t ADC_TO_Q15(uint16_t adc) {
    int32_t v = (int32_t)adc - ADC_MID;
    return (q15_t)(v << ADC_TO_Q15_SHIFT);
}

static inline uint16_t Q15_TO_ADC(q15_t y) {
    int32_t v = (int32_t)y >> ADC_TO_Q15_SHIFT;
    v += ADC_MID;
    if (v < 0) v = 0;
    if (v > ADC_MAX) v = ADC_MAX;
    return (uint16_t)v;
}

#endif /* FILTER_COEFFS_Q15_H */
